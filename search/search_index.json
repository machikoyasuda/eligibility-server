{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 This website provides technical documentation for the eligibility-server application, a part of the benefits application, from the California Integrated Travel Project (Cal-ITP) . Documentation for the main (default) branch is available online . Overview \u00b6 eligibility-server is a Flask 1.1 web application that implements an Eligibility Verification API . The API is designed for privacy and security of user information: The API communicates with signed and encrypted JSON Web Tokens containing only the most necessary of user data for the purpose of eligibility verification The application requires no user accounts and stores no information about the user Interaction with the application is anonymous, with only minimal event tracking for usage and problem analysis The server is published as a Docker container on the GitHub Container Registry . Getting started with the app \u00b6 Running the application locally is possible with Docker and Docker Compose . Build the Docker container for local development \u00b6 docker compose build server Use the Docker container locally \u00b6 docker pull ghcr.io/cal-itp/eligibility-server:main Run the tests \u00b6 coverage run -m pytest Getting started with the docs \u00b6 Run the docs locally \u00b6 docker compose up docs Deploy and publish docs \u00b6 These docs are built and published with GitHub Actions.","title":"Home"},{"location":"#home","text":"This website provides technical documentation for the eligibility-server application, a part of the benefits application, from the California Integrated Travel Project (Cal-ITP) . Documentation for the main (default) branch is available online .","title":"Home"},{"location":"#overview","text":"eligibility-server is a Flask 1.1 web application that implements an Eligibility Verification API . The API is designed for privacy and security of user information: The API communicates with signed and encrypted JSON Web Tokens containing only the most necessary of user data for the purpose of eligibility verification The application requires no user accounts and stores no information about the user Interaction with the application is anonymous, with only minimal event tracking for usage and problem analysis The server is published as a Docker container on the GitHub Container Registry .","title":"Overview"},{"location":"#getting-started-with-the-app","text":"Running the application locally is possible with Docker and Docker Compose .","title":"Getting started with the app"},{"location":"#build-the-docker-container-for-local-development","text":"docker compose build server","title":"Build the Docker container for local development"},{"location":"#use-the-docker-container-locally","text":"docker pull ghcr.io/cal-itp/eligibility-server:main","title":"Use the Docker container locally"},{"location":"#run-the-tests","text":"coverage run -m pytest","title":"Run the tests"},{"location":"#getting-started-with-the-docs","text":"","title":"Getting started with the docs"},{"location":"#run-the-docs-locally","text":"docker compose up docs","title":"Run the docs locally"},{"location":"#deploy-and-publish-docs","text":"These docs are built and published with GitHub Actions.","title":"Deploy and publish docs"},{"location":"getting-started/","text":"Getting started \u00b6 Running the Eligibility Server application in a local, non-production environment requires Docker . The following commands should be run in a terminal program like bash . Clone the repository \u00b6 git clone https://github.com/cal-itp/eligibility-server.git cd eligibility-server Build image using Docker Compose \u00b6 docker compose build --no-cache server Start the server \u00b6 docker compose up [ -d ] server The optional -d flag will start in detatched mode and allow you to continue using the terminal session. Otherwise your terminal will be attached to the container\u2019s terminal, showing the startup and runtime output. After initialization, the server is running on http://localhost at a port dynamically assigned by Docker. See Docker dynamic ports for more information on accessing the site on localhost. Stop the server \u00b6 docker compose down Develop with VS Code Remote Containers \u00b6 This repository comes with a VS Code Remote Containers configuration file. Once you clone the repository locally, simply open it within VS Code, which will prompt you to re-open the repository within the Remote Container. Run unit tests \u00b6 Unit tests are implemented with pytest and can be found in the tests/ directory in the repository. The test suite runs against every pull request via a GitHub Action. pytest is installed and available to run directly in the devcontainer. Build and Open the Dev Container Start the eligibility-server app with F5 From the main directory, run coverage run -m pytests To see the test coverage report, run coverage report -m Run and develop the Documentation \u00b6 docker compose up docs Read more on how to run the docs here .","title":"Getting started"},{"location":"getting-started/#getting-started","text":"Running the Eligibility Server application in a local, non-production environment requires Docker . The following commands should be run in a terminal program like bash .","title":"Getting started"},{"location":"getting-started/#clone-the-repository","text":"git clone https://github.com/cal-itp/eligibility-server.git cd eligibility-server","title":"Clone the repository"},{"location":"getting-started/#build-image-using-docker-compose","text":"docker compose build --no-cache server","title":"Build image using Docker Compose"},{"location":"getting-started/#start-the-server","text":"docker compose up [ -d ] server The optional -d flag will start in detatched mode and allow you to continue using the terminal session. Otherwise your terminal will be attached to the container\u2019s terminal, showing the startup and runtime output. After initialization, the server is running on http://localhost at a port dynamically assigned by Docker. See Docker dynamic ports for more information on accessing the site on localhost.","title":"Start the server"},{"location":"getting-started/#stop-the-server","text":"docker compose down","title":"Stop the server"},{"location":"getting-started/#develop-with-vs-code-remote-containers","text":"This repository comes with a VS Code Remote Containers configuration file. Once you clone the repository locally, simply open it within VS Code, which will prompt you to re-open the repository within the Remote Container.","title":"Develop with VS Code Remote Containers"},{"location":"getting-started/#run-unit-tests","text":"Unit tests are implemented with pytest and can be found in the tests/ directory in the repository. The test suite runs against every pull request via a GitHub Action. pytest is installed and available to run directly in the devcontainer. Build and Open the Dev Container Start the eligibility-server app with F5 From the main directory, run coverage run -m pytests To see the test coverage report, run coverage report -m","title":"Run unit tests"},{"location":"getting-started/#run-and-develop-the-documentation","text":"docker compose up docs Read more on how to run the docs here .","title":"Run and develop the Documentation"},{"location":"releases/","text":"Releases \u00b6 The eligibility-server is published as a Docker image on the GitHub Container Registry. It can be accessed from the repository package page . Every push to the main (default) branch that changes files relevant to the application builds and updates the main package, via the docker-publish GitHub Action. Every release created also pushes a new package publication. Versions \u00b6 All versions of the package may be viewed on the package all versions page . The main (default) branch is published at the main tag: The official releases will be tagged with a version number and the latest tag.","title":"Releases"},{"location":"releases/#releases","text":"The eligibility-server is published as a Docker image on the GitHub Container Registry. It can be accessed from the repository package page . Every push to the main (default) branch that changes files relevant to the application builds and updates the main package, via the docker-publish GitHub Action. Every release created also pushes a new package publication.","title":"Releases"},{"location":"releases/#versions","text":"All versions of the package may be viewed on the package all versions page . The main (default) branch is published at the main tag: The official releases will be tagged with a version number and the latest tag.","title":"Versions"},{"location":"specification/","text":"API Specification \u00b6 This document outlines the requirements for data exchange to verify one or more eligibility criteria for transit benefits. Security \u00b6 Actors \u00b6 The API Client communicates with an API Server on behalf of a user. The Client makes Requests . An API Server holds information enabling fulfillment of an eligibility verification transaction. The Server sends Responses Under these definitions, the benefits application acts as the Client and communicates with this application, the Eligibility Server. Authentication/Authorization \u00b6 The Server must be secured and allow only authorized Clients to make requests. API requests are secured via client secrets sent with the HTTP headers. Transport \u00b6 All API requests and responses must be made over an encrypted HTTPS connection utilizing TLS 1.2 or higher. This API uses a data interchange format known as JSON Web Token (JWT); JWT is an open industry standard method of representing claims securely between two parties. Built into JWT are important protections for data integrity and data source verification. Message signing \u00b6 JWT is designed to use a digital signature, allowing the Server to verify that data received was not modified by a third-party after being sent by the Client. Request and response payloads must be signed with public-key cryptography, which allows the recipient to validate that the payload came from a known sender. Signing algorithms supporting public-key cryptography include the RSA family (e.g. RSA-256) and ECDSA. Message encryption \u00b6 The Request JWT must be encrypted by the Client before sending, using a public key published by the Server. The Server\u2019s Response JWT must also be encrypted, using a public key published by the Client. Composing a message \u00b6 Based on connect2id Nested signed and encrypted JSON Web Token (JWT) . Build JWT header and (request/response) payload (See API documentation ) Generate signature for JWT using the sender\u2019s private key Put header, claims, and signature together into a Signed JWT (JWS) Encrypt JWS using the recipient\u2019s public key (JWE) Base64url-encode JWE JWE is sent with (request/response) API Documentation \u00b6 Below is a description of the HTTP request and response, and request and response payloads. The payloads each make use of JWT Registered claims as well as Private claims . All fields are required. Fields names marked with * are Registered claims defined by the JWT specification. Complete example transactions can be found on another page . Header \u00b6 The same header is shared between Request and Response JWTs. Field name Data type Notes alg * string The signature algorithm enc * string The encryption algorithm typ * string The type of token; must equal \u201cJWT\u201d Header example: { \"alg\" : \"RS256\" , \"enc\" : \"RS256\" , \"typ\" : \"JWT\" } Request \u00b6 Requests are sent as HTTP GET requests to the Server: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer <JWT> The URL endpoint is defined by the implementing Server. The Request JWT is sent as a Base64url-encoded Bearer token in the Authorization header. There is no Request Body and querystring parameters are undefined. Request JWT payload: Field name Data type Notes jti * UUID4 Unique identifier for this JWT iss * string Identifier for the issuer of the JWT (e.g. the Client) iat * integer The time at which the JWT was issued; expressed as Unix seconds agency string Identifier for the transit agency the JWT was issued on behalf of eligibility string[] An array of eligibility types to verify sub * string The subject of the JWT, expressed as the transit rider\u2019s ID (e.g. Driver\u2019s License number) name string The transit rider\u2019s last name Request payload example: { \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"sub\" : \"A1234567\" , \"name\" : \"Garcia\" } Response \u00b6 The response body contains the Base64url-encoded Response JWT: HTTP / 1.1 200 OK Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 232 JWT Response JWT payload: The Server response is intentionally sparse, omitting all PII from the original Request. Field name Data type Notes jti * UUID4 The identifier from the Request JWT iss * string Identifier for the issuer of the JWT (e.g. the Server) iat * integer The time at which the JWT was issued; expressed as Unix seconds eligibility string[] An array of eligibility types that verify as TRUE for the Request Response payload example: { \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"eligibility\" : [ \"senior\" ] } Errors \u00b6 An error can occur if the Request does not contain appropriate data. Errors are returned as JWT payloads in the same way that regular Responses are returned, with a HTTP code 400. HTTP / 1.1 400 Bad Request Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 232 JWT Error JWT payload: Field name Data type Notes jti * UUID4 The identifier from the Request JWT iss * string Identifier for the issuer of the JWT (e.g. the Server) iat * integer The time at which the JWT was issued; expressed as Unix seconds error {string: string} A dictionary mapping field name to error message Example: missing value \u00b6 Occurs when one or more fields are missing (either missing from the payload, or with a null/empty value). { \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"error\" : { \"eligibility\" : \"missing\" } } Example: invalid format \u00b6 Occurs when one or more fields contain data that is invalid according to the Server\u2019s interpretation. { \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"error\" : { \"sub\" : \"invalid\" } } Eligibility types \u00b6 Naturally, the Client and Server must agree on values for the eligibility array. Typically the Server\u2019s definition(s) and type(s) will be agreed upon and used by the Client, as the server is responsible for determining eligibility of a given type.","title":"API Specification"},{"location":"specification/#api-specification","text":"This document outlines the requirements for data exchange to verify one or more eligibility criteria for transit benefits.","title":"API Specification"},{"location":"specification/#security","text":"","title":"Security"},{"location":"specification/#actors","text":"The API Client communicates with an API Server on behalf of a user. The Client makes Requests . An API Server holds information enabling fulfillment of an eligibility verification transaction. The Server sends Responses Under these definitions, the benefits application acts as the Client and communicates with this application, the Eligibility Server.","title":"Actors"},{"location":"specification/#authenticationauthorization","text":"The Server must be secured and allow only authorized Clients to make requests. API requests are secured via client secrets sent with the HTTP headers.","title":"Authentication/Authorization"},{"location":"specification/#transport","text":"All API requests and responses must be made over an encrypted HTTPS connection utilizing TLS 1.2 or higher. This API uses a data interchange format known as JSON Web Token (JWT); JWT is an open industry standard method of representing claims securely between two parties. Built into JWT are important protections for data integrity and data source verification.","title":"Transport"},{"location":"specification/#message-signing","text":"JWT is designed to use a digital signature, allowing the Server to verify that data received was not modified by a third-party after being sent by the Client. Request and response payloads must be signed with public-key cryptography, which allows the recipient to validate that the payload came from a known sender. Signing algorithms supporting public-key cryptography include the RSA family (e.g. RSA-256) and ECDSA.","title":"Message signing"},{"location":"specification/#message-encryption","text":"The Request JWT must be encrypted by the Client before sending, using a public key published by the Server. The Server\u2019s Response JWT must also be encrypted, using a public key published by the Client.","title":"Message encryption"},{"location":"specification/#composing-a-message","text":"Based on connect2id Nested signed and encrypted JSON Web Token (JWT) . Build JWT header and (request/response) payload (See API documentation ) Generate signature for JWT using the sender\u2019s private key Put header, claims, and signature together into a Signed JWT (JWS) Encrypt JWS using the recipient\u2019s public key (JWE) Base64url-encode JWE JWE is sent with (request/response)","title":"Composing a message"},{"location":"specification/#api-documentation","text":"Below is a description of the HTTP request and response, and request and response payloads. The payloads each make use of JWT Registered claims as well as Private claims . All fields are required. Fields names marked with * are Registered claims defined by the JWT specification. Complete example transactions can be found on another page .","title":"API Documentation"},{"location":"specification/#header","text":"The same header is shared between Request and Response JWTs. Field name Data type Notes alg * string The signature algorithm enc * string The encryption algorithm typ * string The type of token; must equal \u201cJWT\u201d Header example: { \"alg\" : \"RS256\" , \"enc\" : \"RS256\" , \"typ\" : \"JWT\" }","title":"Header"},{"location":"specification/#request","text":"Requests are sent as HTTP GET requests to the Server: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer <JWT> The URL endpoint is defined by the implementing Server. The Request JWT is sent as a Base64url-encoded Bearer token in the Authorization header. There is no Request Body and querystring parameters are undefined. Request JWT payload: Field name Data type Notes jti * UUID4 Unique identifier for this JWT iss * string Identifier for the issuer of the JWT (e.g. the Client) iat * integer The time at which the JWT was issued; expressed as Unix seconds agency string Identifier for the transit agency the JWT was issued on behalf of eligibility string[] An array of eligibility types to verify sub * string The subject of the JWT, expressed as the transit rider\u2019s ID (e.g. Driver\u2019s License number) name string The transit rider\u2019s last name Request payload example: { \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"sub\" : \"A1234567\" , \"name\" : \"Garcia\" }","title":"Request"},{"location":"specification/#response","text":"The response body contains the Base64url-encoded Response JWT: HTTP / 1.1 200 OK Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 232 JWT Response JWT payload: The Server response is intentionally sparse, omitting all PII from the original Request. Field name Data type Notes jti * UUID4 The identifier from the Request JWT iss * string Identifier for the issuer of the JWT (e.g. the Server) iat * integer The time at which the JWT was issued; expressed as Unix seconds eligibility string[] An array of eligibility types that verify as TRUE for the Request Response payload example: { \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"eligibility\" : [ \"senior\" ] }","title":"Response"},{"location":"specification/#errors","text":"An error can occur if the Request does not contain appropriate data. Errors are returned as JWT payloads in the same way that regular Responses are returned, with a HTTP code 400. HTTP / 1.1 400 Bad Request Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 232 JWT Error JWT payload: Field name Data type Notes jti * UUID4 The identifier from the Request JWT iss * string Identifier for the issuer of the JWT (e.g. the Server) iat * integer The time at which the JWT was issued; expressed as Unix seconds error {string: string} A dictionary mapping field name to error message","title":"Errors"},{"location":"specification/#example-missing-value","text":"Occurs when one or more fields are missing (either missing from the payload, or with a null/empty value). { \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"error\" : { \"eligibility\" : \"missing\" } }","title":"Example: missing value"},{"location":"specification/#example-invalid-format","text":"Occurs when one or more fields contain data that is invalid according to the Server\u2019s interpretation. { \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"error\" : { \"sub\" : \"invalid\" } }","title":"Example: invalid format"},{"location":"specification/#eligibility-types","text":"Naturally, the Client and Server must agree on values for the eligibility array. Typically the Server\u2019s definition(s) and type(s) will be agreed upon and used by the Client, as the server is responsible for determining eligibility of a given type.","title":"Eligibility types"},{"location":"specification/example-transactions/","text":"Example transactions \u00b6 This page outlines example roundtrip HTTP transactions conforming to the Eligibility Verification API . Sample server \u00b6 For the following examples, assume a Server with a database like: Driver\u2019s License Number Last Name Date of Birth A1234567 Garcia 1955-08-27 B2345678 Hernandez 1961-01-23 Further, assume the Server validates the eligibility type senior for those individuals age 65 or older. Usage of JWT in examples \u00b6 For the purposes of these examples, JWT signing will be done using the simpler, secret-based HMAC SHA-256 (HS256) signing algorithm. This is not appropriate for production as it does not carry the same guarantees as a public-key signing algorithm. Example JWT header \u00b6 Although the header will indicate otherwise, for simplification the examples will not show encryption/decryption of the JWT. The JWT header (both Request and Response) for each of the following examples is: { \"alg\" : \"HS256\" , \"enc\" : \"RS256\" , \"typ\" : \"JWT\" } Test encoding/decoding \u00b6 To test JWT encoding/decoding, use the Debugger tool on JWT.IO . Paste in an encoded key to get the decoded output. Or build decoded output to see the corresponding encoded key. This tool must not be used with real (PII) data. Examples \u00b6 1. Eligible senior \u00b6 This JWT was issued at 2021/09/29 05:30:16 (UTC); the subject (Garcia) is 66 years old. Request JWT payload \u00b6 { \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"sub\" : \"A1234567\" , \"name\" : \"Garcia\" } HTTP Request \u00b6 The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following Authorization header: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey JqdGkiOiIwODkwY2NlNy0yNWQzLTQyNWMtYTgxYi1iYzQzN2MyZTE4YTMiLCJpc3MiOiJodHRwczovL2 NhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC JlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiQTEyMzQ1NjciLCJuYW1lIjoiR2FyY2lhIn0.sM VsPU4ByJNR9lADrjlZHeNi1NkBoPdXO50fnCFDDqM HTTP Response \u00b6 HTTP / 1.1 200 OK Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 254 eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiIwODkwY2NlNy0y NWQzLTQyNWMtYTgxYi1iYzQzN2MyZTE4YTMiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi OjE2MzI4OTM0MTcsImVsaWdpYmlsaXR5IjpbInNlbmlvciJdfQ.tos2vJOO6msv9tMDMT34f95aIRvYj sHRVUz5621fNlI Response JWT payload \u00b6 Base64url-decoding the JWT in the response body yields the following payload: { \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"eligibility\" : [ \"senior\" ] } The presence of the value \"senior\" in the eligibility array indicates that the Request subject associated with this JWT (Garcia) has been verified for that eligibility. 2. Ineligible senior \u00b6 This JWT was issued at 2021/09/29 05:30:16 (UTC), meaning the subject (Hernandez) is 60 years old. Request JWT payload \u00b6 { \"jti\" : \"b2bb29dc-6f6a-44a2-83cf-e298123bbbd2\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"sub\" : \"B2345678\" , \"name\" : \"Hernandez\" } HTTP Request \u00b6 The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following Authorization header: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey JqdGkiOiJiMmJiMjlkYy02ZjZhLTQ0YTItODNjZi1lMjk4MTIzYmJiZDIiLCJpc3MiOiJodHRwczovL2 NhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC JlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiQjIzNDU2NzgiLCJuYW1lIjoiSGVybmFuZGV6In 0.iY58E7ZYQziQ8ZH7iGSwPGp9S1xbFm6JLXFK0D2E-0w HTTP Response \u00b6 HTTP / 1.1 200 OK Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 243 eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJiMmJiMjlkYy02 ZjZhLTQ0YTItODNjZi1lMjk4MTIzYmJiZDIiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi OjE2MzI4OTM0MTcsImVsaWdpYmlsaXR5IjpbXX0._hE8UJPYSmQ0q6xymx8UIVF8BrlZry-G82g9ssyP dO4 Response JWT payload \u00b6 Base64url-decoding the JWT in the response body yields the following payload: { \"jti\" : \"b2bb29dc-6f6a-44a2-83cf-e298123bbbd2\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"eligibility\" : [] } The absence of a value in the eligibility array indicates that the Request subject associated with this JWT (Hernandez) has not been verified for any eligibility. 3. No eligibility data \u00b6 No data on the subject (Smith) exists in the Server\u2019s database. *Request JWT payload \u00b6 { \"jti\" : \"ef8e9805-bb1b-4f97-903b-6b9ab830d604\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"sub\" : \"C3456789\" , \"name\" : \"Smith\" } HTTP Request \u00b6 The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following Authorization header: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey JqdGkiOiJlZjhlOTgwNS1iYjFiLTRmOTctOTAzYi02YjlhYjgzMGQ2MDQiLCJpc3MiOiJodHRwczovL2 NhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC JlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiQzM0NTY3ODkiLCJuYW1lIjoiU21pdGgifQ.0xp eyL3GRAQGrGfvreruTra7dbJpjQQ0zLiIqm4H7sE HTTP Response \u00b6 HTTP / 1.1 200 OK Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 246 eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJlZjhlOTgwNS1i YjFiLTRmOTctOTAzYi02YjlhYjgzMGQ2MDQiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi OjE2MzI4OTM0MTcsImVsaWdpYmlsaXR5IjpbXX0.LEITzkSGL4Y7uA30pRYxNG7XjDI0lSYtev5X7hNK Gn4 Response JWT payload \u00b6 Base64url-decoding the JWT in the response body yields the following payload: { \"jti\" : \"ef8e9805-bb1b-4f97-903b-6b9ab830d604\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"eligibility\" : [] } The absence of a value in the eligibility array indicates that the Request subject associated with this JWT (Smith) has not been verified for any eligibility. Note it is important to return an empty eligibility array rather than an error message or 4xx HTTP code here. This way there is no distinction between \u201cexists in the database\u201d and \u201cdoes not exist in the database\u201d. 4. Missing request data \u00b6 The request lacks a sub property, which is required. Request JWT payload \u00b6 { \"jti\" : \"b692fa7c-3dca-4d0d-90ba-e5415af48285\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"name\" : \"Garcia\" } HTTP Request \u00b6 The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following Authorization header: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey JqdGkiOiJiNjkyZmE3Yy0zZGNhLTRkMGQtOTBiYS1lNTQxNWFmNDgyODUiLCJpc3MiOiJodHRwczovL2 NhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC JlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwibmFtZSI6IkdhcmNpYSJ9.EtnDvEHY1CjldnH-98dIMwdir pxbNbuCg18R7uR8Gag HTTP Response \u00b6 HTTP / 1.1 400 Bad Request Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 258 eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJiNjkyZmE3Yy0z ZGNhLTRkMGQtOTBiYS1lNTQxNWFmNDgyODUiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi OjE2MzI4OTM0MTcsImVycm9yIjp7InN1YiI6Im1pc3NpbmcifX0.1Z53Z2PInyTSQRomcWhcC2Z3c_qL WoISH7eFv-_JJnE Response JWT payload \u00b6 Base64url-decoding the JWT in the response body yields the following payload: { \"jti\" : \"b692fa7c-3dca-4d0d-90ba-e5415af48285\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"error\" : { \"sub\" : \"missing\" } } The error message indicates that the Request subject associated with this JWT is missing. 5. Invalid request data \u00b6 The request\u2019s sub property is not in the correct format. Request JWT payload \u00b6 { \"jti\" : \"d0dbacaf-e691-4ecc-a733-a42a904da607\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"sub\" : \"12345678Z\" , \"name\" : \"Garcia\" } HTTP Request \u00b6 The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following Authorization header: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey JqdGkiOiJkMGRiYWNhZi1lNjkxLTRlY2MtYTczMy1hNDJhOTA0ZGE2MDciLCJpc3MiOiJodHRwczovL2 NhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC JlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiMTIzNDU2NzhaIiwibmFtZSI6IkdhcmNpYSJ9.2 w5JhbfIzOSdKWTOrP5CQdhWw9Vo8VunoASe4EVZOoI HTTP Response \u00b6 HTTP / 1.1 400 Bad Request Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 258 eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJkMGRiYWNhZi1l NjkxLTRlY2MtYTczMy1hNDJhOTA0ZGE2MDciLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi OjE2MzI4OTM0MTcsImVycm9yIjp7InN1YiI6ImludmFsaWQifX0.V_8VA7vWTzwibGE4mfyQ0zAwKhLV qKDYsl2M55z8rDc Response JWT payload \u00b6 Base64url-decoding the JWT in the response body yields the following payload: { \"jti\" : \"d0dbacaf-e691-4ecc-a733-a42a904da607\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"error\" : { \"sub\" : \"invalid\" } } The error message indicates that the Request subject associated with this JWT was invalid.","title":"Example transactions"},{"location":"specification/example-transactions/#example-transactions","text":"This page outlines example roundtrip HTTP transactions conforming to the Eligibility Verification API .","title":"Example transactions"},{"location":"specification/example-transactions/#sample-server","text":"For the following examples, assume a Server with a database like: Driver\u2019s License Number Last Name Date of Birth A1234567 Garcia 1955-08-27 B2345678 Hernandez 1961-01-23 Further, assume the Server validates the eligibility type senior for those individuals age 65 or older.","title":"Sample server"},{"location":"specification/example-transactions/#usage-of-jwt-in-examples","text":"For the purposes of these examples, JWT signing will be done using the simpler, secret-based HMAC SHA-256 (HS256) signing algorithm. This is not appropriate for production as it does not carry the same guarantees as a public-key signing algorithm.","title":"Usage of JWT in examples"},{"location":"specification/example-transactions/#example-jwt-header","text":"Although the header will indicate otherwise, for simplification the examples will not show encryption/decryption of the JWT. The JWT header (both Request and Response) for each of the following examples is: { \"alg\" : \"HS256\" , \"enc\" : \"RS256\" , \"typ\" : \"JWT\" }","title":"Example JWT header"},{"location":"specification/example-transactions/#test-encodingdecoding","text":"To test JWT encoding/decoding, use the Debugger tool on JWT.IO . Paste in an encoded key to get the decoded output. Or build decoded output to see the corresponding encoded key. This tool must not be used with real (PII) data.","title":"Test encoding/decoding"},{"location":"specification/example-transactions/#examples","text":"","title":"Examples"},{"location":"specification/example-transactions/#1-eligible-senior","text":"This JWT was issued at 2021/09/29 05:30:16 (UTC); the subject (Garcia) is 66 years old.","title":"1. Eligible senior"},{"location":"specification/example-transactions/#request-jwt-payload","text":"{ \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"sub\" : \"A1234567\" , \"name\" : \"Garcia\" }","title":"Request JWT payload"},{"location":"specification/example-transactions/#http-request","text":"The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following Authorization header: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey JqdGkiOiIwODkwY2NlNy0yNWQzLTQyNWMtYTgxYi1iYzQzN2MyZTE4YTMiLCJpc3MiOiJodHRwczovL2 NhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC JlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiQTEyMzQ1NjciLCJuYW1lIjoiR2FyY2lhIn0.sM VsPU4ByJNR9lADrjlZHeNi1NkBoPdXO50fnCFDDqM","title":"HTTP Request"},{"location":"specification/example-transactions/#http-response","text":"HTTP / 1.1 200 OK Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 254 eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiIwODkwY2NlNy0y NWQzLTQyNWMtYTgxYi1iYzQzN2MyZTE4YTMiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi OjE2MzI4OTM0MTcsImVsaWdpYmlsaXR5IjpbInNlbmlvciJdfQ.tos2vJOO6msv9tMDMT34f95aIRvYj sHRVUz5621fNlI","title":"HTTP Response"},{"location":"specification/example-transactions/#response-jwt-payload","text":"Base64url-decoding the JWT in the response body yields the following payload: { \"jti\" : \"0890cce7-25d3-425c-a81b-bc437c2e18a3\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"eligibility\" : [ \"senior\" ] } The presence of the value \"senior\" in the eligibility array indicates that the Request subject associated with this JWT (Garcia) has been verified for that eligibility.","title":"Response JWT payload"},{"location":"specification/example-transactions/#2-ineligible-senior","text":"This JWT was issued at 2021/09/29 05:30:16 (UTC), meaning the subject (Hernandez) is 60 years old.","title":"2. Ineligible senior"},{"location":"specification/example-transactions/#request-jwt-payload_1","text":"{ \"jti\" : \"b2bb29dc-6f6a-44a2-83cf-e298123bbbd2\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"sub\" : \"B2345678\" , \"name\" : \"Hernandez\" }","title":"Request JWT payload"},{"location":"specification/example-transactions/#http-request_1","text":"The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following Authorization header: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey JqdGkiOiJiMmJiMjlkYy02ZjZhLTQ0YTItODNjZi1lMjk4MTIzYmJiZDIiLCJpc3MiOiJodHRwczovL2 NhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC JlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiQjIzNDU2NzgiLCJuYW1lIjoiSGVybmFuZGV6In 0.iY58E7ZYQziQ8ZH7iGSwPGp9S1xbFm6JLXFK0D2E-0w","title":"HTTP Request"},{"location":"specification/example-transactions/#http-response_1","text":"HTTP / 1.1 200 OK Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 243 eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJiMmJiMjlkYy02 ZjZhLTQ0YTItODNjZi1lMjk4MTIzYmJiZDIiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi OjE2MzI4OTM0MTcsImVsaWdpYmlsaXR5IjpbXX0._hE8UJPYSmQ0q6xymx8UIVF8BrlZry-G82g9ssyP dO4","title":"HTTP Response"},{"location":"specification/example-transactions/#response-jwt-payload_1","text":"Base64url-decoding the JWT in the response body yields the following payload: { \"jti\" : \"b2bb29dc-6f6a-44a2-83cf-e298123bbbd2\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"eligibility\" : [] } The absence of a value in the eligibility array indicates that the Request subject associated with this JWT (Hernandez) has not been verified for any eligibility.","title":"Response JWT payload"},{"location":"specification/example-transactions/#3-no-eligibility-data","text":"No data on the subject (Smith) exists in the Server\u2019s database.","title":"3. No eligibility data"},{"location":"specification/example-transactions/#request-jwt-payload_2","text":"{ \"jti\" : \"ef8e9805-bb1b-4f97-903b-6b9ab830d604\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"sub\" : \"C3456789\" , \"name\" : \"Smith\" }","title":"*Request JWT payload"},{"location":"specification/example-transactions/#http-request_2","text":"The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following Authorization header: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey JqdGkiOiJlZjhlOTgwNS1iYjFiLTRmOTctOTAzYi02YjlhYjgzMGQ2MDQiLCJpc3MiOiJodHRwczovL2 NhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC JlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiQzM0NTY3ODkiLCJuYW1lIjoiU21pdGgifQ.0xp eyL3GRAQGrGfvreruTra7dbJpjQQ0zLiIqm4H7sE","title":"HTTP Request"},{"location":"specification/example-transactions/#http-response_2","text":"HTTP / 1.1 200 OK Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 246 eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJlZjhlOTgwNS1i YjFiLTRmOTctOTAzYi02YjlhYjgzMGQ2MDQiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi OjE2MzI4OTM0MTcsImVsaWdpYmlsaXR5IjpbXX0.LEITzkSGL4Y7uA30pRYxNG7XjDI0lSYtev5X7hNK Gn4","title":"HTTP Response"},{"location":"specification/example-transactions/#response-jwt-payload_2","text":"Base64url-decoding the JWT in the response body yields the following payload: { \"jti\" : \"ef8e9805-bb1b-4f97-903b-6b9ab830d604\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"eligibility\" : [] } The absence of a value in the eligibility array indicates that the Request subject associated with this JWT (Smith) has not been verified for any eligibility. Note it is important to return an empty eligibility array rather than an error message or 4xx HTTP code here. This way there is no distinction between \u201cexists in the database\u201d and \u201cdoes not exist in the database\u201d.","title":"Response JWT payload"},{"location":"specification/example-transactions/#4-missing-request-data","text":"The request lacks a sub property, which is required.","title":"4. Missing request data"},{"location":"specification/example-transactions/#request-jwt-payload_3","text":"{ \"jti\" : \"b692fa7c-3dca-4d0d-90ba-e5415af48285\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"name\" : \"Garcia\" }","title":"Request JWT payload"},{"location":"specification/example-transactions/#http-request_3","text":"The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following Authorization header: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey JqdGkiOiJiNjkyZmE3Yy0zZGNhLTRkMGQtOTBiYS1lNTQxNWFmNDgyODUiLCJpc3MiOiJodHRwczovL2 NhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC JlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwibmFtZSI6IkdhcmNpYSJ9.EtnDvEHY1CjldnH-98dIMwdir pxbNbuCg18R7uR8Gag","title":"HTTP Request"},{"location":"specification/example-transactions/#http-response_3","text":"HTTP / 1.1 400 Bad Request Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 258 eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJiNjkyZmE3Yy0z ZGNhLTRkMGQtOTBiYS1lNTQxNWFmNDgyODUiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi OjE2MzI4OTM0MTcsImVycm9yIjp7InN1YiI6Im1pc3NpbmcifX0.1Z53Z2PInyTSQRomcWhcC2Z3c_qL WoISH7eFv-_JJnE","title":"HTTP Response"},{"location":"specification/example-transactions/#response-jwt-payload_3","text":"Base64url-decoding the JWT in the response body yields the following payload: { \"jti\" : \"b692fa7c-3dca-4d0d-90ba-e5415af48285\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"error\" : { \"sub\" : \"missing\" } } The error message indicates that the Request subject associated with this JWT is missing.","title":"Response JWT payload"},{"location":"specification/example-transactions/#5-invalid-request-data","text":"The request\u2019s sub property is not in the correct format.","title":"5. Invalid request data"},{"location":"specification/example-transactions/#request-jwt-payload_4","text":"{ \"jti\" : \"d0dbacaf-e691-4ecc-a733-a42a904da607\" , \"iss\" : \"https://calitp.org\" , \"iat\" : 1632893416 , \"agency\" : \"ABC Transit Company\" , \"eligibility\" : [ \"senior\" ], \"sub\" : \"12345678Z\" , \"name\" : \"Garcia\" }","title":"Request JWT payload"},{"location":"specification/example-transactions/#http-request_4","text":"The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following Authorization header: GET /api/eligibility HTTP / 1.1 Host : verify.gov Authorization : Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey JqdGkiOiJkMGRiYWNhZi1lNjkxLTRlY2MtYTczMy1hNDJhOTA0ZGE2MDciLCJpc3MiOiJodHRwczovL2 NhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC JlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiMTIzNDU2NzhaIiwibmFtZSI6IkdhcmNpYSJ9.2 w5JhbfIzOSdKWTOrP5CQdhWw9Vo8VunoASe4EVZOoI","title":"HTTP Request"},{"location":"specification/example-transactions/#http-response_4","text":"HTTP / 1.1 400 Bad Request Date : Wed, 29 Sep 2021 05:30:17 GMT Content-Type : text/plain; charset=UTF-8 Content-Length : 258 eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJkMGRiYWNhZi1l NjkxLTRlY2MtYTczMy1hNDJhOTA0ZGE2MDciLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi OjE2MzI4OTM0MTcsImVycm9yIjp7InN1YiI6ImludmFsaWQifX0.V_8VA7vWTzwibGE4mfyQ0zAwKhLV qKDYsl2M55z8rDc","title":"HTTP Response"},{"location":"specification/example-transactions/#response-jwt-payload_4","text":"Base64url-decoding the JWT in the response body yields the following payload: { \"jti\" : \"d0dbacaf-e691-4ecc-a733-a42a904da607\" , \"iss\" : \"https://verify.gov\" , \"iat\" : 1632893417 , \"error\" : { \"sub\" : \"invalid\" } } The error message indicates that the Request subject associated with this JWT was invalid.","title":"Response JWT payload"},{"location":"specification/token-signing-encryption/","text":"Token signing and encryption \u00b6 The Eligiblity Verification API makes use of Signed and Encrypted JSON Web Tokens (JWS, JWE, JWT) as a means of data transfer. A public/private keypair must be generated by each party (Benefits Client and Eligibility Verification Server). Example keys are included for the test verification server and sample agencies. Generating new keypairs \u00b6 Using a terminal like bash , and the openssl program: openssl genrsa -out [ file name ] .key 2048 Extract the public key \u00b6 openssl rsa -in [ private key created above ] .key -pubout > [ file name ] .pub There are two new files: [file name].key : private key in PEM format, apply to a TransitAgency instance in Django [file name].pub : public key in PEM format, give to the Eligibility Verification server A public key in PEM format from the Eligibility Verification server is also required, and must be applied to an EligiblityVerifier instance in Django. Format for config file \u00b6 To get a single-line version of a PEM key, suitable for a JSON configuration file: awk 'NF {sub(/\\r/, \"\"); printf \"%s\\\\n\",$0;}' <your PEM file here>","title":"Token signing and encryption"},{"location":"specification/token-signing-encryption/#token-signing-and-encryption","text":"The Eligiblity Verification API makes use of Signed and Encrypted JSON Web Tokens (JWS, JWE, JWT) as a means of data transfer. A public/private keypair must be generated by each party (Benefits Client and Eligibility Verification Server). Example keys are included for the test verification server and sample agencies.","title":"Token signing and encryption"},{"location":"specification/token-signing-encryption/#generating-new-keypairs","text":"Using a terminal like bash , and the openssl program: openssl genrsa -out [ file name ] .key 2048","title":"Generating new keypairs"},{"location":"specification/token-signing-encryption/#extract-the-public-key","text":"openssl rsa -in [ private key created above ] .key -pubout > [ file name ] .pub There are two new files: [file name].key : private key in PEM format, apply to a TransitAgency instance in Django [file name].pub : public key in PEM format, give to the Eligibility Verification server A public key in PEM format from the Eligibility Verification server is also required, and must be applied to an EligiblityVerifier instance in Django.","title":"Extract the public key"},{"location":"specification/token-signing-encryption/#format-for-config-file","text":"To get a single-line version of a PEM key, suitable for a JSON configuration file: awk 'NF {sub(/\\r/, \"\"); printf \"%s\\\\n\",$0;}' <your PEM file here>","title":"Format for config file"}]}